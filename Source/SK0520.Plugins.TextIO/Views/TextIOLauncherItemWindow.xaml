<Window 
	x:Class="SK0520.Plugins.TextIO.Views.TextIOLauncherItemWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:system="clr-namespace:System;assembly=mscorlib"

	xmlns:views_conveter="clr-namespace:SK0520.Plugins.TextIO.Views.Converter"

	Title="TextIOLauncherItemWindow" 
	Height="450" 
	Width="800"
	WindowStartupLocation="CenterScreen"
	ResizeMode="CanResizeWithGrip"
	Topmost="{Binding IsChecked, ElementName=IsTopmost}"
	
	xmlns:viewmodels="clr-namespace:SK0520.Plugins.TextIO.ViewModels"
	
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	xmlns:datacontext="clr-namespace:SK0520.Plugins.TextIO.ViewModels" d:DataContext="{d:DesignInstance Type=datacontext:TextIOLauncherItemViewModel}"
>
	<Window.Resources>
		<system:Double x:Key="GridSplitter">3</system:Double>
		<Thickness x:Key="CommonThickness">3</Thickness>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
		<views_conveter:RadioButtonNegativeConverter x:Key="RadioButtonNegativeConverter" />
		<Style x:Key="ToolbarTitle" TargetType="Label">
			<Setter Property="FontWeight" Value="Bold" />
		</Style>
		<Style x:Key="Editor" TargetType="TextBox">
			<Style.Triggers>
				<Trigger Property="IsReadOnly" Value="True">
					<Setter Property="UndoLimit" Value="0" />
				</Trigger>
			</Style.Triggers>
			<Setter Property="Margin" Value="{StaticResource CommonThickness}" />
			<Setter Property="AcceptsReturn" Value="True" />
			<Setter Property="AcceptsTab" Value="True" />
			<Setter Property="VerticalScrollBarVisibility" Value="Auto" />
			<Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
		</Style>
	</Window.Resources>

	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>

		<Grid Grid.Row="0">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="35*" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="30*" MinWidth="120" MaxWidth="300" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="35*" />
			</Grid.ColumnDefinitions>

			<Grid Grid.Column="0">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>

				<ToolBar Grid.Row="0">
					<Label Style="{StaticResource ToolbarTitle}">input</Label>
					<Button Command="{Binding InputAllPasteCommand}">all paste</Button>
					<Label Style="{StaticResource ToolbarTitle}">editor</Label>
					<Button Command="ApplicationCommands.Copy">copy</Button>
					<Button Command="ApplicationCommands.Paste">paste</Button>
				</ToolBar>

				<TextBox 
					Grid.Row="1" 
					Text="{Binding InputValue, UpdateSourceTrigger=PropertyChanged}"
				>
					<TextBox.Style>
						<Style TargetType="TextBox" BasedOn="{StaticResource Editor}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsChecked, ElementName=IsInputBreak}" Value="True">
									<Setter Property="TextWrapping" Value="Wrap" />
								</DataTrigger>
							</Style.Triggers>
							<Setter Property="TextWrapping" Value="NoWrap" />
						</Style>
					</TextBox.Style>
				</TextBox>
			</Grid>

			<GridSplitter Grid.Column="1" Width="{StaticResource GridSplitter}" />

			<Grid Grid.Column="2">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*"/>
					<RowDefinition Height="Auto" />
				</Grid.RowDefinitions>

				<ToolBar Grid.Row="0">
					<Label Style="{StaticResource ToolbarTitle}">source</Label>
					<Button Command="{Binding AddScriptCommand}">add</Button>
					<Button Command="{Binding UpdateScriptCommand}" CommandParameter="{Binding SelectedScriptHead}">update</Button>
					<Separator />
					<Button Command="{Binding MoveUpScriptCommand}" CommandParameter="{Binding SelectedScriptHead}">↑</Button>
					<Button Command="{Binding MoveDownScriptCommand}" CommandParameter="{Binding SelectedScriptHead}">↓</Button>
					<Separator />
					<Button Command="{Binding RemoveScriptCommand}" CommandParameter="{Binding SelectedScriptHead}">remove</Button>
				</ToolBar>

				<Grid Grid.Row="1">
					<Grid.RowDefinitions>
						<RowDefinition Height="6*" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="4*" />
					</Grid.RowDefinitions>

					<ListBox 
						Grid.Row="0" 
						Margin="{StaticResource CommonThickness}" 
						ItemsSource="{Binding ScriptHeadCollection}"
						SelectedItem="{Binding SelectedScriptHead}"
					>
						<ListBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Name}" />
							</DataTemplate>
						</ListBox.ItemTemplate>
					</ListBox>

					<GridSplitter Grid.Row="1" Height="{StaticResource GridSplitter}"/>

					<GroupBox
						Grid.Row="2"
						Margin="{StaticResource CommonThickness}"
						Header="params"
					>
						<GroupBox.Resources>
							<DataTemplate DataType="{x:Type viewmodels:BooleanScriptParameterViewModel}">
								<StackPanel>
									<Label Content="{Binding Display}" ToolTip="{Binding Name}" />
									<WrapPanel Orientation="Horizontal">
										<RadioButton IsChecked="{Binding Value, Converter={StaticResource RadioButtonNegativeConverter}}">OFF</RadioButton>
										<RadioButton IsChecked="{Binding Value}">ON</RadioButton>
									</WrapPanel>
								</StackPanel>
							</DataTemplate>
							<DataTemplate DataType="{x:Type viewmodels:StringScriptParameterViewModel}">
								<StackPanel>
									<Label Content="{Binding Display}" ToolTip="{Binding Name}" />
									<TextBox Text="{Binding Value}" />
								</StackPanel>
							</DataTemplate>
							<DataTemplate DataType="{x:Type viewmodels:IntegerScriptParameterViewModel}">
								<StackPanel>
									<Label Content="{Binding Display}" ToolTip="{Binding Name}" />
									<TextBox Text="{Binding Value}" />
								</StackPanel>
							</DataTemplate>
							<DataTemplate DataType="{x:Type viewmodels:DecimalScriptParameterViewModel}">
								<StackPanel>
									<Label Content="{Binding Display}" ToolTip="{Binding Name}" />
									<TextBox Text="{Binding Value}" />
								</StackPanel>
							</DataTemplate>
							<DataTemplate DataType="{x:Type viewmodels:DateTimeScriptParameterViewModel}">
								<StackPanel>
									<Label Content="{Binding Display}" ToolTip="{Binding Name}" />
									<DatePicker SelectedDate="{Binding Value}" />
								</StackPanel>
							</DataTemplate>
						</GroupBox.Resources>
						<GroupBox.Style>
							<Style TargetType="GroupBox">
								<Style.Triggers>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding IsSelectedScriptHead}" Value="True" />
											<Condition Binding="{Binding SelectedScriptHead.HasParameters}" Value="True" />
										</MultiDataTrigger.Conditions>
										<Setter Property="Content">
											<Setter.Value>
												<ItemsControl ItemsSource="{Binding SelectedScriptHead.ParameterCollection}">
													<ItemsControl.Template>
														<ControlTemplate>
															<ScrollViewer>
																<ItemsPresenter />
															</ScrollViewer>
														</ControlTemplate>
													</ItemsControl.Template>
													<ItemsControl.ItemsPanel>
														<ItemsPanelTemplate>
															<StackPanel />
														</ItemsPanelTemplate>
													</ItemsControl.ItemsPanel>
												</ItemsControl>
											</Setter.Value>
										</Setter>
									</MultiDataTrigger>
								</Style.Triggers>
								<Setter Property="Content">
									<Setter.Value>
										<TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">パラメータなし</TextBlock>
									</Setter.Value>
								</Setter>
							</Style>
						</GroupBox.Style>
					</GroupBox>

				</Grid>

				<Button
					Grid.Row="2"
					FontWeight="Bold"
					Margin="{StaticResource CommonThickness}"
					Padding="{StaticResource CommonThickness}"
					Command="{Binding ExecuteCommand}"
				>
					execute
				</Button>
			</Grid>

			<GridSplitter Grid.Column="3" Width="{StaticResource GridSplitter}" />

			<Grid Grid.Column="4">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>

				<ToolBar Grid.Row="0">
					<Label Style="{StaticResource ToolbarTitle}">output</Label>
					<Button Command="{Binding OutputAllCopyCommand}">all copy</Button>
					<Label Style="{StaticResource ToolbarTitle}">editor</Label>
					<Button Command="ApplicationCommands.Copy">copy</Button>
				</ToolBar>

				<TextBox 
					Grid.Row="3"
					IsReadOnly="True"
					Text="{Binding OutputValue, Mode=OneWay}"
				>
					<TextBox.Style>
						<Style TargetType="TextBox" BasedOn="{StaticResource Editor}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding OutputIsError}" Value="True">
									<Setter Property="Background" Value="LightPink" />
								</DataTrigger>
								<DataTrigger Binding="{Binding IsChecked, ElementName=IsOutputBreak}" Value="True">
									<Setter Property="TextWrapping" Value="Wrap" />
								</DataTrigger>
							</Style.Triggers>
							<Setter Property="TextWrapping" Value="NoWrap" />
						</Style>
					</TextBox.Style>
				</TextBox>
			</Grid>
		</Grid>

		<StatusBar Grid.Row="1">
			<CheckBox x:Name="IsTopmost">topmost</CheckBox>
			<CheckBox x:Name="IsInputBreak">input break</CheckBox>
			<CheckBox x:Name="IsOutputBreak">output break</CheckBox>
		</StatusBar>
	</Grid>
</Window>
